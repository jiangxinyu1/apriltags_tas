// Generated by gencpp from file apriltags_msgs/AprilTag.msg
// DO NOT EDIT!


#ifndef APRILTAGS_MSGS_MESSAGE_APRILTAG_H
#define APRILTAGS_MSGS_MESSAGE_APRILTAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose.h>

namespace apriltags_msgs
{
template <class ContainerAllocator>
struct AprilTag_
{
  typedef AprilTag_<ContainerAllocator> Type;

  AprilTag_()
    : id()
    , corners_px()
    , pose_3d()
    , pose_valid(false)  {
    }
  AprilTag_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , corners_px(_alloc)
    , pose_3d(_alloc)
    , pose_valid(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _corners_px_type;
  _corners_px_type corners_px;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_3d_type;
  _pose_3d_type pose_3d;

   typedef uint8_t _pose_valid_type;
  _pose_valid_type pose_valid;





  typedef boost::shared_ptr< ::apriltags_msgs::AprilTag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::apriltags_msgs::AprilTag_<ContainerAllocator> const> ConstPtr;

}; // struct AprilTag_

typedef ::apriltags_msgs::AprilTag_<std::allocator<void> > AprilTag;

typedef boost::shared_ptr< ::apriltags_msgs::AprilTag > AprilTagPtr;
typedef boost::shared_ptr< ::apriltags_msgs::AprilTag const> AprilTagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::apriltags_msgs::AprilTag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::apriltags_msgs::AprilTag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::apriltags_msgs::AprilTag_<ContainerAllocator1> & lhs, const ::apriltags_msgs::AprilTag_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.corners_px == rhs.corners_px &&
    lhs.pose_3d == rhs.pose_3d &&
    lhs.pose_valid == rhs.pose_valid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::apriltags_msgs::AprilTag_<ContainerAllocator1> & lhs, const ::apriltags_msgs::AprilTag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace apriltags_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::apriltags_msgs::AprilTag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::apriltags_msgs::AprilTag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::apriltags_msgs::AprilTag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "568095c4db6d177cf3bc296bc284d97b";
  }

  static const char* value(const ::apriltags_msgs::AprilTag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x568095c4db6d177cULL;
  static const uint64_t static_value2 = 0xf3bc296bc284d97bULL;
};

template<class ContainerAllocator>
struct DataType< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "apriltags_msgs/AprilTag";
  }

  static const char* value(const ::apriltags_msgs::AprilTag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"geometry_msgs/Point[] corners_px\n"
"geometry_msgs/Pose pose_3d\n"
"bool pose_valid\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::apriltags_msgs::AprilTag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.corners_px);
      stream.next(m.pose_3d);
      stream.next(m.pose_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AprilTag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::apriltags_msgs::AprilTag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::apriltags_msgs::AprilTag_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "corners_px[]" << std::endl;
    for (size_t i = 0; i < v.corners_px.size(); ++i)
    {
      s << indent << "  corners_px[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.corners_px[i]);
    }
    s << indent << "pose_3d: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose_3d);
    s << indent << "pose_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pose_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // APRILTAGS_MSGS_MESSAGE_APRILTAG_H
