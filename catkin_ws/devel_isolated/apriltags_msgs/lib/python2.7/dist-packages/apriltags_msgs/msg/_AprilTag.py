# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from apriltags_msgs/AprilTag.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class AprilTag(genpy.Message):
  _md5sum = "568095c4db6d177cf3bc296bc284d97b"
  _type = "apriltags_msgs/AprilTag"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string id
geometry_msgs/Point[] corners_px
geometry_msgs/Pose pose_3d
bool pose_valid
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['id','corners_px','pose_3d','pose_valid']
  _slot_types = ['string','geometry_msgs/Point[]','geometry_msgs/Pose','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,corners_px,pose_3d,pose_valid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AprilTag, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = ''
      if self.corners_px is None:
        self.corners_px = []
      if self.pose_3d is None:
        self.pose_3d = geometry_msgs.msg.Pose()
      if self.pose_valid is None:
        self.pose_valid = False
    else:
      self.id = ''
      self.corners_px = []
      self.pose_3d = geometry_msgs.msg.Pose()
      self.pose_valid = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.corners_px)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners_px:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_7dB().pack(_x.pose_3d.position.x, _x.pose_3d.position.y, _x.pose_3d.position.z, _x.pose_3d.orientation.x, _x.pose_3d.orientation.y, _x.pose_3d.orientation.z, _x.pose_3d.orientation.w, _x.pose_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.corners_px is None:
        self.corners_px = None
      if self.pose_3d is None:
        self.pose_3d = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners_px = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.corners_px.append(val1)
      _x = self
      start = end
      end += 57
      (_x.pose_3d.position.x, _x.pose_3d.position.y, _x.pose_3d.position.z, _x.pose_3d.orientation.x, _x.pose_3d.orientation.y, _x.pose_3d.orientation.z, _x.pose_3d.orientation.w, _x.pose_valid,) = _get_struct_7dB().unpack(str[start:end])
      self.pose_valid = bool(self.pose_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.corners_px)
      buff.write(_struct_I.pack(length))
      for val1 in self.corners_px:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_7dB().pack(_x.pose_3d.position.x, _x.pose_3d.position.y, _x.pose_3d.position.z, _x.pose_3d.orientation.x, _x.pose_3d.orientation.y, _x.pose_3d.orientation.z, _x.pose_3d.orientation.w, _x.pose_valid))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.corners_px is None:
        self.corners_px = None
      if self.pose_3d is None:
        self.pose_3d = geometry_msgs.msg.Pose()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.corners_px = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.corners_px.append(val1)
      _x = self
      start = end
      end += 57
      (_x.pose_3d.position.x, _x.pose_3d.position.y, _x.pose_3d.position.z, _x.pose_3d.orientation.x, _x.pose_3d.orientation.y, _x.pose_3d.orientation.z, _x.pose_3d.orientation.w, _x.pose_valid,) = _get_struct_7dB().unpack(str[start:end])
      self.pose_valid = bool(self.pose_valid)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_7dB = None
def _get_struct_7dB():
    global _struct_7dB
    if _struct_7dB is None:
        _struct_7dB = struct.Struct("<7dB")
    return _struct_7dB
